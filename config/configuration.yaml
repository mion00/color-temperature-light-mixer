# https://www.home-assistant.io/integrations/default_config/
default_config:

# https://www.home-assistant.io/integrations/logger/
logger:
  default: error
  logs:
    custom_components.light_temperature_mixer: debug
    custom_components.light_temperature_mixer.light: debug
    custom_components.light_temperature_mixer.sensor: info
    # homeassistant.components.light: debug

debugpy:
  start: true
  wait: false

light:
  # - platform: cct_virtual_light
  #   name: CCT
  #   warm_light:
  #     entity_id: light.warm_white
  #     color_temp_kelvin: 3000
  #   cold_light:
  #     entity_id: light.cold_white
  #     color_temp_kelvin: 6000

    # Fake light based on input below
  - platform: template
    lights:
      warm_white:
        friendly_name: Warm
        value_template: "{{ states('input_boolean.warm_white_on') }}"
        level_template: "{{ states('input_number.warm_white_brightness') | int }}"
        temperature_template: 333

        turn_on:
          - if:
              - condition: template
                value_template: "{{ brightness is defined | default(False) }}"
            then:
              - service: input_number.set_value
                target:
                  entity_id: input_number.warm_white_brightness
                data:
                  value: "{{ brightness }}"
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.warm_white_on
        turn_off:
          service: input_boolean.turn_off
          target:
            entity_id: input_boolean.warm_white_on
        set_level:
          - service: input_number.set_value
            target:
              entity_id: input_number.warm_white_brightness
            data:
              value: "{{ brightness }}"
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.warm_white_on

      cold_white:
        friendly_name: Cold
        value_template: "{{ states('input_boolean.cold_white_on') }}"
        level_template: "{{ states('input_number.cold_white_brightness') | int }}"
        temperature_template: 166

        turn_on:
          - if:
              - condition: template
                value_template: "{{ brightness is defined | default(False) }}"
            then:
              - service: input_number.set_value
                target:
                  entity_id: input_number.cold_white_brightness
                data:
                  value: "{{ brightness }}"
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.cold_white_on
        turn_off:
          service: input_boolean.turn_off
          target:
            entity_id: input_boolean.cold_white_on
        set_level:
          - service: input_number.set_value
            target:
              entity_id: input_number.cold_white_brightness
            data:
              value: "{{ brightness }}"
          - service: input_boolean.turn_on
            target:
              entity_id: input_boolean.cold_white_on

      # warm_white_1:
      #   friendly_name: Warm 1
      #   value_template: "{{ states('input_boolean.warm_white_on_1') }}"
      #   level_template: "{{ states('input_number.warm_white_brightness_1') | int }}"
      #   temperature_template: 333

      #   turn_on:
      #     - if:
      #         - condition: template
      #           value_template: "{{ brightness is defined | default(False) }}"
      #       then:
      #         - service: input_number.set_value
      #           target:
      #             entity_id: input_number.warm_white_brightness_1
      #           data:
      #             value: "{{ brightness }}"
      #     - service: input_boolean.turn_on
      #       target:
      #         entity_id: input_boolean.warm_white_on_1
      #   turn_off:
      #     service: input_boolean.turn_off
      #     target:
      #       entity_id: input_boolean.warm_white_on_1
      #   set_level:
      #     - service: input_number.set_value
      #       target:
      #         entity_id: input_number.warm_white_brightness_1
      #       data:
      #         value: "{{ brightness }}"
      #     - service: input_boolean.turn_on
      #       target:
      #         entity_id: input_boolean.warm_white_on_1

      # cold_white_1:
      #   friendly_name: Cold 1
      #   value_template: "{{ states('input_boolean.cold_white_on_1') }}"
      #   level_template: "{{ states('input_number.cold_white_brightness_1') | int }}"
      #   temperature_template: 166

      #   turn_on:
      #     - if:
      #         - condition: template
      #           value_template: "{{ brightness is defined | default(False) }}"
      #       then:
      #         - service: input_number.set_value
      #           target:
      #             entity_id: input_number.cold_white_brightness_1
      #           data:
      #             value: "{{ brightness }}"
      #     - service: input_boolean.turn_on
      #       target:
      #         entity_id: input_boolean.cold_white_on_1
      #   turn_off:
      #     service: input_boolean.turn_off
      #     target:
      #       entity_id: input_boolean.cold_white_on_1
      #   set_level:
      #     - service: input_number.set_value
      #       target:
      #         entity_id: input_number.cold_white_brightness_1
      #       data:
      #         value: "{{ brightness }}"
      #     - service: input_boolean.turn_on
      #       target:
      #         entity_id: input_boolean.cold_white_on_1

# Helper inputs
input_number:
  warm_white_brightness:
    min: 1
    max: 255
    step: 1
  cold_white_brightness:
    min: 1
    max: 255
    step: 1

  # warm_white_brightness_1:
  #   min: 1
  #   max: 255
  #   step: 1
  # cold_white_brightness_1:
    # min: 1
    # max: 255
    # step: 1

input_boolean:
  warm_white_on:
  cold_white_on:

  # warm_white_on_1:
  # cold_white_on_1:

light_temperature_mixer:
  - name: "Test light"
    warm_light_entity_id: light.warm_white
    warm_light_color_temp_kelvin: 3000
    cold_light_entity_id: light.cold_white
    cold_light_color_temp_kelvin: 6000

  # - name: "CCT second"
  #   warm_light_entity_id: light.warm_white_1
  #   warm_light_color_temp_kelvin: 3000
  #   cold_light_entity_id: light.cold_white_1
  #   cold_light_color_temp_kelvin: 6000
